// Auto-generated from table.html.
// DO NOT EDIT.

library x_table;

import 'dart:html' as autogenerated_html;
import 'dart:web_audio' as autogenerated_audio;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;

import 'package:web_ui/web_ui.dart';

import '../tablecolumn.dart';

class Table extends WebComponent {
  
  /** Autogenerated from the template. */
  
  /**
  * Shadow root for this component. We use 'var' to allow simulating shadow DOM
  * on browsers that don't support this feature.
  */
  var _root;
  autogenerated_html.TableElement __e36;
  
  List<autogenerated.WatcherDisposer> __stoppers1;
  
  autogenerated_html.TableRowElement __e27;
  
  List<Function> _removeChild__e27 = [];
  
  autogenerated_html.TableSectionElement __e35;
  
  List<Function> _removeChild__e35 = [];
  
  Table.forElement(e) : super.forElement(e);
  
  void created_autogenerated() {
    _root = createShadowRoot();
    
    _root.innerHtml = '''
    
    <table class="" id="__e-36">
    <thead>
    <tr id="__e-27"></tr>
    </thead>
    <tbody id="__e-35"></tbody>
    </table>
    ''';
    __e36 = _root.query('#__e-36');
    __e27 = __e36.query('#__e-27');
    __e35 = __e36.query('#__e-35');
    __stoppers1 = [];
    
  }
  
  void inserted_autogenerated() {
    __stoppers1.add(autogenerated.bindCssClasses(__e36, () => tableClass));
    
    __stoppers1.add(autogenerated.watchAndInvoke(() => columns, (_) {
      for (var remover in _removeChild__e27) remover();
      _removeChild__e27.clear();
      
      __e27.nodes.clear();
      
      for (var column in columns) {
        
        autogenerated_html.TableCellElement __e26;
        var __binding25;
        List<autogenerated.WatcherDisposer> __stoppers2_1;
        
        __e26 = new autogenerated_html.Element.tag('th');
        __binding25 = new autogenerated_html.Text('');
        __stoppers2_1 = [];
        __e26.nodes.add(__binding25);
        
        __e27.nodes.addAll([new autogenerated_html.Text('\n              '), __e26, new autogenerated_html.Text('\n            ')]);
        
        __stoppers2_1.add(autogenerated.watchAndInvoke(() => '${column.label}', (__e) {
          __binding25 = autogenerated.updateBinding(column.label, __binding25, __e.newValue);
        }));
        
        _removeChild__e27.add(() {
          
          __e26 = null;
          (__stoppers2_1..forEach((s) => s())).clear();
          __binding25 = null;
          
        });
      }
    }));
    
    __stoppers1.add(autogenerated.watchAndInvoke(() => items, (_) {
      for (var remover in _removeChild__e35) remover();
      _removeChild__e35.clear();
      
      __e35.nodes.clear();
      
      for (var item in items) {
        
        autogenerated_html.TableRowElement __e34;
        autogenerated_html.TableCellElement __e29;
        var __binding28;
        List<autogenerated.WatcherDisposer> __stoppers3_1;
        autogenerated_html.TableCellElement __e31;
        var __binding30;
        autogenerated_html.TableCellElement __e33;
        var __binding32;
        
        __e34 = new autogenerated_html.Element.html('<tr>\n              <td id="__e-29"></td>\n              <td id="__e-31"></td>\n              <td id="__e-33"></td>\n            </tr>');
        __e29 = __e34.query('#__e-29');
        __binding28 = new autogenerated_html.Text('');
        __stoppers3_1 = [];
        __e29.nodes.add(__binding28);
        __e31 = __e34.query('#__e-31');
        __binding30 = new autogenerated_html.Text('');
        __e31.nodes.add(__binding30);
        __e33 = __e34.query('#__e-33');
        __binding32 = new autogenerated_html.Text('');
        __e33.nodes.add(__binding32);
        
        __e35.nodes.addAll([new autogenerated_html.Text('\n            '), __e34, new autogenerated_html.Text('\n            '), new autogenerated_html.Text('\n          ')]);
        
        __stoppers3_1.add(autogenerated.watchAndInvoke(() => '${item.firstname}', (__e) {
          __binding28 = autogenerated.updateBinding(item.firstname, __binding28, __e.newValue);
        }));
        __stoppers3_1.add(autogenerated.watchAndInvoke(() => '${item.lastname}', (__e) {
          __binding30 = autogenerated.updateBinding(item.lastname, __binding30, __e.newValue);
        }));
        __stoppers3_1.add(autogenerated.watchAndInvoke(() => '${item.email}', (__e) {
          __binding32 = autogenerated.updateBinding(item.email, __binding32, __e.newValue);
        }));
        
        _removeChild__e35.add(() {
          
          __e34 = null;
          __e29 = null;
          (__stoppers3_1..forEach((s) => s())).clear();
          __binding28 = null;
          __e31 = null;
          __binding30 = null;
          __e33 = null;
          __binding32 = null;
          
        });
      }
    }));
    
  }
  
  void removed_autogenerated() {
    _root = null;
    
    (__stoppers1..forEach((s) => s())).clear();
    
    __e36 = null;
    
    __e27.nodes.clear();
    
    for (var remover in _removeChild__e27) remover();
    _removeChild__e27.clear();
    
    __e27 = null;
    
    __e35.nodes.clear();
    
    for (var remover in _removeChild__e35) remover();
    _removeChild__e35.clear();
    
    __e35 = null;
    
  }
  
  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated_html.ShadowRoot) _root = this;
  }
  
  /** Original code from the component. */
  
  bool striped = false;
  bool bordered = false;
  bool hover = false;
  bool condensed = false;
  List items;
  List<Tablecolumn> columns;
  
  String get tableClass {
    var result = "table";
    
    if (striped) {
      result = result.concat(" table-striped");
    }
    if (bordered) {
      result = result.concat(" table-bordered");
    }
    if (hover) {
      result = result.concat(" table-hover");
    }
    if (condensed) {
      result = result.concat(" table-condensed");
    }
    
    return result;
  }
  
  inserted() {
    //print("inserted");
  }
  
  created() {
    if (attributes["striped"] != null) {
      striped = (attributes["striped"] == "true");
    }
    if (attributes["bordered"] != null) {
      bordered = (attributes["bordered"] == "true");
    }
    if (attributes["hover"] != null) {
      hover = (attributes["hover"] == "true");
    }
    if (attributes["condensed"] != null) {
      condensed = (attributes["condensed"] == "true");
    }
  }
}

